# syntax=docker/dockerfile:1.4
FROM node:20-alpine AS base
WORKDIR /app
RUN apk add --no-cache libc6-compat

# Development stage
FROM base AS development
ENV NODE_ENV=development
# Copy package files
COPY frontend/package*.json ./
# Install ALL dependencies including devDependencies
RUN npm install
# Copy frontend source - will be overridden by volume mount in dev
COPY frontend/ .
EXPOSE 5173
CMD ["npm", "run", "dev"]

# Dependencies stage
FROM base AS deps
COPY frontend/package*.json ./
RUN npm ci --only=production

# Build stage
FROM base AS build
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ .
RUN npm run build

# Production stage
FROM nginx:alpine AS production
COPY --from=build /app/dist /usr/share/nginx/html
# Copy nginx config if it exists
COPY nginx/nginx.conf /etc/nginx/nginx.conf
EXPOSE 80 443
CMD ["nginx", "-g", "daemon off;"]